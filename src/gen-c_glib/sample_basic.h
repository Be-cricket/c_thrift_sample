/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SAMPLE_BASIC_H
#define SAMPLE_BASIC_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "sample_sample_types.h"

/* Basic service interface */
typedef struct _sampleBasicIf sampleBasicIf;  /* dummy object */

struct _sampleBasicIfInterface
{
  GTypeInterface parent;

  gboolean (*ping) (sampleBasicIf *iface, GError **error);
  gboolean (*hello) (sampleBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);
};
typedef struct _sampleBasicIfInterface sampleBasicIfInterface;

GType sample_basic_if_get_type (void);
#define SAMPLE_TYPE_BASIC_IF (sample_basic_if_get_type())
#define SAMPLE_BASIC_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SAMPLE_TYPE_BASIC_IF, sampleBasicIf))
#define SAMPLE_IS_BASIC_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SAMPLE_TYPE_BASIC_IF))
#define SAMPLE_BASIC_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), SAMPLE_TYPE_BASIC_IF, sampleBasicIfInterface))

gboolean sample_basic_if_ping (sampleBasicIf *iface, GError **error);
gboolean sample_basic_if_hello (sampleBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);

/* Basic service client */
struct _sampleBasicClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _sampleBasicClient sampleBasicClient;

struct _sampleBasicClientClass
{
  GObjectClass parent;
};
typedef struct _sampleBasicClientClass sampleBasicClientClass;

GType sample_basic_client_get_type (void);
#define SAMPLE_TYPE_BASIC_CLIENT (sample_basic_client_get_type())
#define SAMPLE_BASIC_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SAMPLE_TYPE_BASIC_CLIENT, sampleBasicClient))
#define SAMPLE_BASIC_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SAMPLE_TYPE_BASIC_CLIENT, sampleBasicClientClass))
#define SAMPLE_BASIC_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SAMPLE_TYPE_BASIC_CLIENT))
#define SAMPLE_BASIC_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SAMPLE_TYPE_BASIC_CLIENT))
#define SAMPLE_BASIC_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SAMPLE_TYPE_BASIC_CLIENT, sampleBasicClientClass))

gboolean sample_basic_client_ping (sampleBasicIf * iface, GError ** error);
gboolean sample_basic_client_send_ping (sampleBasicIf * iface, GError ** error);
gboolean sample_basic_client_recv_ping (sampleBasicIf * iface, GError ** error);
gboolean sample_basic_client_hello (sampleBasicIf * iface, gchar ** _return, const gchar * arg, GError ** error);
gboolean sample_basic_client_send_hello (sampleBasicIf * iface, const gchar * arg, GError ** error);
gboolean sample_basic_client_recv_hello (sampleBasicIf * iface, gchar ** _return, GError ** error);
void basic_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void basic_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* Basic handler (abstract base class) */
struct _sampleBasicHandler
{
  GObject parent;
};
typedef struct _sampleBasicHandler sampleBasicHandler;

struct _sampleBasicHandlerClass
{
  GObjectClass parent;

  gboolean (*ping) (sampleBasicIf *iface, GError **error);
  gboolean (*hello) (sampleBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);
};
typedef struct _sampleBasicHandlerClass sampleBasicHandlerClass;

GType sample_basic_handler_get_type (void);
#define SAMPLE_TYPE_BASIC_HANDLER (sample_basic_handler_get_type())
#define SAMPLE_BASIC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SAMPLE_TYPE_BASIC_HANDLER, sampleBasicHandler))
#define SAMPLE_IS_BASIC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SAMPLE_TYPE_BASIC_HANDLER))
#define SAMPLE_BASIC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SAMPLE_TYPE_BASIC_HANDLER, sampleBasicHandlerClass))
#define SAMPLE_IS_BASIC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SAMPLE_TYPE_BASIC_HANDLER))
#define SAMPLE_BASIC_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SAMPLE_TYPE_BASIC_HANDLER, sampleBasicHandlerClass))

gboolean sample_basic_handler_ping (sampleBasicIf *iface, GError **error);
gboolean sample_basic_handler_hello (sampleBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);

/* Basic processor */
struct _sampleBasicProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  sampleBasicHandler *handler;
  GHashTable *process_map;
};
typedef struct _sampleBasicProcessor sampleBasicProcessor;

struct _sampleBasicProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _sampleBasicProcessorClass sampleBasicProcessorClass;

GType sample_basic_processor_get_type (void);
#define SAMPLE_TYPE_BASIC_PROCESSOR (sample_basic_processor_get_type())
#define SAMPLE_BASIC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SAMPLE_TYPE_BASIC_PROCESSOR, sampleBasicProcessor))
#define SAMPLE_IS_BASIC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SAMPLE_TYPE_BASIC_PROCESSOR))
#define SAMPLE_BASIC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SAMPLE_TYPE_BASIC_PROCESSOR, sampleBasicProcessorClass))
#define SAMPLE_IS_BASIC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SAMPLE_TYPE_BASIC_PROCESSOR))
#define SAMPLE_BASIC_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SAMPLE_TYPE_BASIC_PROCESSOR, sampleBasicProcessorClass))

#endif /* SAMPLE_BASIC_H */
